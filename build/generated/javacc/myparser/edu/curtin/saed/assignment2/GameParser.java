/* Generated By:JavaCC: Do not edit this line. GameParser.java */
package edu.curtin.saed.assignment2;
import java.util.List;
import java.util.ArrayList;
import edu.curtin.models.Coordinate;
import edu.curtin.models.Item;
import edu.curtin.models.Obstacle;
import java.io.InputStreamReader;

public class GameParser implements GameParserConstants {
    // Data structures to store the parsed information
    public static int gridRows, gridCols;
    public static int startRow, startCol;
    public static int goalRow, goalCol;

    public static List<Item> items = new ArrayList();
    public static List<Obstacle> obstacles = new ArrayList();
    public static List<String> plugins = new ArrayList();
    public static String pythonScript = "";

    public static void parse(InputStreamReader reader) throws java.io.IOException, ParseException {
        GameParser parser = new GameParser(reader);
        GameParser.parseInputFile();
    }

  static final public void parseInputFile() throws ParseException {
    parseGridDeclaration();
    parseStartAndGoal();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITEM:
      case OBSTACLE:
      case PLUGIN:
      case SCRIPT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITEM:
        parseItem();
        break;
      case OBSTACLE:
        parseObstacle();
        break;
      case PLUGIN:
        parsePlugin();
        break;
      case SCRIPT:
        parseScript();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static final public void parseScript() throws ParseException {
    jj_consume_token(SCRIPT);
    jj_consume_token(SCRIPT_BODY_START);
    parseScriptContent();
    jj_consume_token(SCRIPT_BODY_END);
  }

  static final public void parseScriptContent() throws ParseException {
        pythonScript = "";
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCRIPT_BODY_CONTENT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(SCRIPT_BODY_CONTENT);
    }
        // Capture script content
        pythonScript += token.image;
        String scriptContent = token.image;
        System.out.println("Parsed script content: " + scriptContent);
  }

  static final public void parseGridDeclaration() throws ParseException {
    jj_consume_token(SIZE);
    jj_consume_token(LPAREN);
    gridRows = parseInteger();
    jj_consume_token(COMMA);
    gridCols = parseInteger();
    jj_consume_token(RPAREN);
      System.out.println("Parsed grid size: " + gridRows + "x" + gridCols);
  }

  static final public void parseStartAndGoal() throws ParseException {
    jj_consume_token(START);
    jj_consume_token(LPAREN);
    startRow = parseInteger();
    jj_consume_token(COMMA);
    startCol = parseInteger();
    jj_consume_token(RPAREN);
      System.out.println("Parsed start position: (" + startRow + "," + startCol + ")");
    jj_consume_token(GOAL);
    jj_consume_token(LPAREN);
    goalRow = parseInteger();
    jj_consume_token(COMMA);
    goalCol = parseInteger();
    jj_consume_token(RPAREN);
      System.out.println("Parsed goal position: (" + goalRow + "," + goalCol + ")");
  }

  static final public void parseItem() throws ParseException {
Token itemNameToken, messageToken;
  List<Coordinate> coordinatesList;
    jj_consume_token(ITEM);
    itemNameToken = jj_consume_token(QUOTED_STRING);
    jj_consume_token(LBRACE);
    jj_consume_token(AT);
    coordinatesList = parseCoordinatesList();
    jj_consume_token(MESSAGE);
    messageToken = jj_consume_token(QUOTED_STRING);
    jj_consume_token(RBRACE);
        String itemName = itemNameToken.image.replaceAll("\u005c"", ""); // Remove the quotes
        String message = messageToken.image.replaceAll("\u005c"", ""); // Remove the quotes
        Item item = new Item(itemName, coordinatesList, message);
        System.out.println("Parsed item: " + itemNameToken.image + " with message: " + messageToken .image);
        items.add(item);
  }

  static final public void parseObstacle() throws ParseException {
    List<String> requiresTokens;
    List<Coordinate> coordinates;
    jj_consume_token(OBSTACLE);
    jj_consume_token(LBRACE);
    jj_consume_token(AT);
    coordinates = parseCoordinatesList();
    requiresTokens = parseRequiresList();
    jj_consume_token(RBRACE);
obstacles.add(new Obstacle(coordinates,requiresTokens));
  }

  static final public void parsePlugin() throws ParseException {
    Token pluginClassNameToken;
    jj_consume_token(PLUGIN);
    pluginClassNameToken = jj_consume_token(IDENTIFIER);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(26);
      jj_consume_token(IDENTIFIER);
    }
        String pluginClassName = pluginClassNameToken.image;
        System.out.println("Parsed plugin: " + pluginClassName);
        plugins.add(pluginClassName);
  }

  static final public List<Coordinate> parseCoordinatesList() throws ParseException {
 List<Coordinate> coordinates = new ArrayList();
 int row, col;
    jj_consume_token(LPAREN);
    row = parseInteger();
    jj_consume_token(COMMA);
    col = parseInteger();
    jj_consume_token(RPAREN);
          coordinates.add(new Coordinate(row, col));
 System.out.println("row"+ row + "col"+col);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      jj_consume_token(LPAREN);
      row = parseInteger();
      jj_consume_token(COMMA);
      col = parseInteger();
      jj_consume_token(RPAREN);
       coordinates.add(new Coordinate(row, col));
        System.out.println("row"+ row + "col"+col);
    }
      System.out.println("Parsed coordinates list.");
    {if (true) return coordinates;}
    throw new Error("Missing return statement in function");
  }

  static final public List<String> parseRequiresList() throws ParseException {
    Token t;
    List<String> requirements = new ArrayList();
    jj_consume_token(REQUIRES);
    t = jj_consume_token(QUOTED_STRING);
      requirements.add(t.image.replaceAll("\u005c"", ""));
        System.out.println(t.image.replaceAll("\u005c"", ""));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(QUOTED_STRING);
        requirements.add(t.image.replaceAll("\u005c"", ""));
        System.out.println(t.image.replaceAll("\u005c"", ""));
    }
       {if (true) return requirements;}
    throw new Error("Missing return statement in function");
  }

  static final public int parseInteger() throws ParseException {
                       Token t;
    t = jj_consume_token(INTEGER);
                    {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GameParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xf00,0xf00,0x1000000,0x4000000,0x200000,0x200000,};
   }

  /** Constructor with InputStream. */
  public GameParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GameParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GameParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GameParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GameParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GameParser(GameParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GameParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
