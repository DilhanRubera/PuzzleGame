PARSER_BEGIN(GameParser)
package edu.curtin.saed.assignment2;
import java.util.List;
import java.util.ArrayList;
import edu.curtin.models.Coordinate;
import edu.curtin.models.Item;
import edu.curtin.models.Obstacle;
import java.io.InputStreamReader;

public class GameParser {
    // Data structures to store the parsed information
    public static int gridRows, gridCols;
    public static int startRow, startCol;
    public static int goalRow, goalCol;

    public static List<Item> items = new ArrayList();
    public static List<Obstacle> obstacles = new ArrayList();
    public static List<String> plugins = new ArrayList();
    public static String pythonScript = "";

    public static void parse(InputStreamReader reader) throws java.io.IOException, ParseException {
        GameParser parser = new GameParser(reader);
        GameParser.parseInputFile();
    }
}





PARSER_END(GameParser)

SKIP : { " " | "\n" | "\r" | "\t" }

<DEFAULT> TOKEN : {
    < SIZE: "size" > |
    < START: "start" > |
    < GOAL: "goal" >  |
    < ITEM: "item" > |
    < OBSTACLE: "obstacle" > |
    < PLUGIN: "plugin" > |
    < SCRIPT: "script" > |
    < AT: "at" > |
    < REQUIRES: "requires" > |
    < MESSAGE: "message" > |
    < IDENTIFIER: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "0"-"9", "_", "."])* > |
    < INTEGER: (["0"-"9"])+ > |
    < LPAREN: "(" > |
    < RPAREN: ")" > |
    < LBRACE: "{" > |
    < RBRACE: "}" > |
    < COMMA: "," > |
    < QUOTED_STRING: "\"" (~["\""])* "\"" >|
    < SCRIPT_BODY_START: "!{" > { SwitchTo(SCRIPT_STATE); }
}



<SCRIPT_STATE> TOKEN : {
    < SCRIPT_BODY_CONTENT: (~["}"])+ > |
    < SCRIPT_BODY_END: "}" > { SwitchTo(DEFAULT); }
}

void parseInputFile() : {}
{
    parseGridDeclaration()
    parseStartAndGoal()
    (parseItem()| parseObstacle() | parsePlugin() | parseScript())* <EOF>
}

void parseScript() : {}
{
    <SCRIPT> <SCRIPT_BODY_START>
    parseScriptContent()
    <SCRIPT_BODY_END>
}

void parseScriptContent() : {}
{
{
        pythonScript = "";
    }

    ( <SCRIPT_BODY_CONTENT> )* {
        // Capture script content
        pythonScript += token.image;
        String scriptContent = token.image;
        System.out.println("Parsed script content: " + scriptContent);
    }
}

void parseGridDeclaration() : {}
{
    <SIZE> <LPAREN> gridRows = parseInteger() <COMMA> gridCols = parseInteger() <RPAREN>
    { System.out.println("Parsed grid size: " + gridRows + "x" + gridCols); }
}

void parseStartAndGoal() : {}
{
    <START> <LPAREN> startRow = parseInteger() <COMMA> startCol = parseInteger() <RPAREN>
    { System.out.println("Parsed start position: (" + startRow + "," + startCol + ")"); }
    <GOAL> <LPAREN> goalRow = parseInteger() <COMMA> goalCol = parseInteger() <RPAREN>
    { System.out.println("Parsed goal position: (" + goalRow + "," + goalCol + ")"); }
}

void parseItem() : {
Token itemNameToken, messageToken;
  List<Coordinate> coordinatesList;
    }
{

    <ITEM> itemNameToken = <QUOTED_STRING>
    <LBRACE>
    <AT> coordinatesList = parseCoordinatesList()
    <MESSAGE> messageToken = <QUOTED_STRING>
    <RBRACE>
    {
        String itemName = itemNameToken.image.replaceAll("\"", ""); // Remove the quotes
        String message = messageToken.image.replaceAll("\"", ""); // Remove the quotes
        Item item = new Item(itemName, coordinatesList, message);
        System.out.println("Parsed item: " + itemNameToken.image + " with message: " + messageToken .image);
        items.add(item);
    }
}

void parseObstacle() : {
    List<String> requiresTokens;
    List<Coordinate> coordinates;

}
{
    <OBSTACLE> <LBRACE>
    <AT> coordinates= parseCoordinatesList()
   requiresTokens = parseRequiresList()
    <RBRACE>
    {
obstacles.add(new Obstacle(coordinates,requiresTokens));
    }
}

void parsePlugin() : {
    Token pluginClassNameToken;
}
{
    <PLUGIN> pluginClassNameToken = <IDENTIFIER> ( "." <IDENTIFIER> )*
    {
        String pluginClassName = pluginClassNameToken.image;
        System.out.println("Parsed plugin: " + pluginClassName);
        plugins.add(pluginClassName);
    }
}

List<Coordinate> parseCoordinatesList() : {
 List<Coordinate> coordinates = new ArrayList();
 int row, col;
}
{
    <LPAREN>  row = parseInteger() <COMMA> col = parseInteger() <RPAREN>
        { coordinates.add(new Coordinate(row, col));
 System.out.println("row"+ row + "col"+col);
  }

    ( <COMMA> <LPAREN> row =  parseInteger() <COMMA> col = parseInteger() <RPAREN>
     { coordinates.add(new Coordinate(row, col));
        System.out.println("row"+ row + "col"+col); }
     )*

    { System.out.println("Parsed coordinates list.");
    return coordinates;
    }
}


List<String> parseRequiresList() : {
    Token t;
    List<String> requirements = new ArrayList();
}
{
    <REQUIRES> t = <QUOTED_STRING>
    { requirements.add(t.image.replaceAll("\"", ""));
        System.out.println(t.image.replaceAll("\"", ""));}
    ((<COMMA> t= <QUOTED_STRING> {
        requirements.add(t.image.replaceAll("\"", ""));
        System.out.println(t.image.replaceAll("\"", ""));  }   )*)
     { return requirements; }
}

int parseInteger() : { Token t; }
{
    t = <INTEGER> { return Integer.parseInt(t.image); }
}

